
diff --git a/include/text_strings.h.in b/include/text_strings.h.in
index 749179b..845ffa9 100644
--- a/include/text_strings.h.in
+++ b/include/text_strings.h.in
@@ -25,6 +25,15 @@
 #define TEXT_PAUSE _("PAUSE") // Pause text, Castle Courses
 #define TEXT_HUD_CONGRATULATIONS _("CONGRATULATIONS") // Course Complete Text, Bowser Courses
 
+//Reonucam
+#ifdef REONUCAM
+#define TEXT_CAM_INFO_SLOWEST _("CAM SPEED: SLOWEST")
+#define TEXT_CAM_INFO_SLOW _("CAM SPEED: SLOW")
+#define TEXT_CAM_INFO_MEDIUM _("CAM SPEED: MEDIUM")
+#define TEXT_CAM_INFO_FAST _("CAM SPEED: FAST")
+#define TEXT_CAM_INFO_FASTEST _("CAM SPEED: FASTEST")
+#endif
+
 #if defined(VERSION_JP) || defined(VERSION_SH)
 
 /**
diff --git a/src/game/camera.c b/src/game/camera.c
index 7ed9a4d..2a0ba96 100644
--- a/src/game/camera.c
+++ b/src/game/camera.c
@@ -74,7 +74,9 @@
  *          -Y                      +Z                      -Y
  *
  */
-
+#ifdef REONUCAM
+struct ReonucamState gReonucamState = { 2, FALSE, FALSE, FALSE, 0, 0, };
+#endif
 // BSS
 /**
  * Stores Lakitu's position from the last frame, used for transitioning in next_lakitu_state()
@@ -483,6 +485,25 @@ CameraTransition sModeTransitions[] = {
 extern u8 sDanceCutsceneIndexTable[][4];
 extern u8 sZoomOutAreaMasks[];
 
+#ifdef REONUCAM
+// Returns the camera speed based on the user's camera speed setting
+f32 set_camera_speed(void) {
+    switch(gReonucamState.speed) {
+        case 0:
+            return 0.5f;
+        case 1:
+            return 1;
+        case 2:
+            return 1.5f;
+        case 3:
+            return 2;
+        case 4:
+            return 3.5f;
+    }
+    return 0;
+}
+#endif
+
 /**
  * Starts a camera shake triggered by an interaction
  */
@@ -900,14 +921,32 @@ s32 update_radial_camera(struct Camera *c, Vec3f focus, Vec3f pos) {
     f32 cenDistZ = sMarioCamState->pos[2] - c->areaCenZ;
     s16 camYaw = atan2s(cenDistZ, cenDistX) + sModeOffsetYaw;
     s16 pitch = look_down_slopes(camYaw);
-    UNUSED f32 unused1;
     f32 posY;
     f32 focusY;
-    UNUSED f32 unused2;
-    UNUSED f32 unused3;
+#ifdef REONUCAM
+    f32 yOff;
+#else
     f32 yOff = 125.f;
+#endif
     f32 baseDist = 1000.f;
 
+    #ifdef REONUCAM
+    if (gMarioState->action & ACT_FLAG_SWIMMING) {
+        yOff = -125.f;
+    } else {
+        yOff = 125.f;
+    }
+
+    if ((gPlayer1Controller->buttonDown & R_TRIG) && (gPlayer1Controller->buttonDown & U_CBUTTONS)) {
+        gReonucamState.keepCliffCam = 1;
+        pitch = DEGREES(60);
+    } else if (((gPlayer1Controller->buttonDown & U_CBUTTONS) || (gPlayer1Controller->buttonDown & R_TRIG)) && gReonucamState.keepCliffCam) {
+        pitch = DEGREES(60);
+    } else {
+        gReonucamState.keepCliffCam = 0;
+    }
+    #endif
+
     sAreaYaw = camYaw - sModeOffsetYaw;
     calc_y_to_curr_floor(&posY, 1.f, 200.f, &focusY, 0.9f, 200.f);
     focus_on_mario(focus, pos, posY + yOff, focusY + yOff, sLakituDist + baseDist, pitch, camYaw);
@@ -1119,7 +1158,7 @@ void lakitu_zoom(f32 rangeDist, s16 rangePitch) {
 }
 
 void radial_camera_input_default(struct Camera *c) {
-    radial_camera_input(c, 0.f);
+    radial_camera_input(c);
 }
 
 /**
@@ -1165,15 +1204,76 @@ void mode_radial_camera(struct Camera *c) {
     pan_ahead_of_player(c);
 }
 
+s32 snap_to_45_degrees(s16 angle) {
+    if (angle % DEGREES(45)) {
+        s16 d1 = ABS(angle) % DEGREES(45);
+        s16 d2 = DEGREES(45) - d1;
+        if (angle > 0) {
+            if (d1 < d2) return angle - d1;
+            else return angle + d2;
+        } else {
+            if (d1 < d2) return angle + d1;
+            else return angle - d2;
+        }
+    }
+    return angle;
+}
+
+#ifdef REONUCAM
+void reonucam_handler(void) {
+    // Get the camera speed based on the user's setting
+    f32 cameraSpeed = set_camera_speed();
+    //45ยบ rotations
+    if ((gPlayer1Controller->buttonPressed & L_CBUTTONS) && !(gPlayer1Controller->buttonDown & R_TRIG)) {
+        s8DirModeBaseYaw -= DEGREES(45);
+    } else if ((gPlayer1Controller->buttonPressed & R_CBUTTONS) && !(gPlayer1Controller->buttonDown & R_TRIG)) {
+        s8DirModeBaseYaw += DEGREES(45);
+    }
+    //Smooth rotation
+    if (gPlayer1Controller->buttonDown & R_TRIG) {
+        if (gPlayer1Controller->buttonDown & L_CBUTTONS) {
+            s8DirModeBaseYaw -= DEGREES(cameraSpeed);
+        } else if (gPlayer1Controller->buttonDown & R_CBUTTONS) {
+            s8DirModeBaseYaw += DEGREES(cameraSpeed);
+        }
+        gReonucamState.rButtonCounter++; // This increses whenever R is held.
+    } else {
+        if (gReonucamState.rButtonCounter > 0 && gReonucamState.rButtonCounter <= 5 && !((gPlayer1Controller->buttonDown & L_CBUTTONS) || (gPlayer1Controller->buttonDown & R_CBUTTONS) || (gMarioState->action & ACT_FLAG_SWIMMING_OR_FLYING))) {
+            // This centers the camera behind mario. It triggers when you let go of R in less than 5 frames.
+            s8DirModeYawOffset = 0;
+            s8DirModeBaseYaw = gMarioState->faceAngle[1]-0x8000;
+            gMarioState->area->camera->yaw = s8DirModeBaseYaw;
+            play_sound_rbutton_changed();
+        }
+        gReonucamState.rButtonCounter = 0;
+    }
+    if (gPlayer1Controller->buttonPressed & R_TRIG) {
+        if (gReonucamState.rButtonCounter2 <= 5) {
+            set_cam_angle(CAM_ANGLE_MARIO); // Enter mario cam if R is pressed 2 times in less than 5 frames
+            gReonucamState.rButtonCounter2 = 6;
+        } else {
+            gReonucamState.rButtonCounter2 = 0;
+        }
+    } else {
+        gReonucamState.rButtonCounter2++;
+     }
+    if (gPlayer1Controller->buttonPressed & D_JPAD) {
+       s8DirModeBaseYaw = snap_to_45_degrees(s8DirModeBaseYaw); // Lock the camera to the nearest 45deg axis
+    }
+}
+#endif
+
 /**
  * A mode that only has 8 camera angles, 45 degrees apart
  */
 void mode_8_directions_camera(struct Camera *c) {
     Vec3f pos;
-    UNUSED u8 unused[8];
     s16 oldAreaYaw = sAreaYaw;
-
-    radial_camera_input(c, 0.f);
+#ifdef REONUCAM
+    reonucam_handler();
+    radial_camera_input(c);
+#else
+    radial_camera_input(c);
 
     if (gPlayer1Controller->buttonPressed & R_CBUTTONS) {
         s8DirModeYawOffset += DEGREES(45);
@@ -1183,13 +1283,20 @@ void mode_8_directions_camera(struct Camera *c) {
         s8DirModeYawOffset -= DEGREES(45);
         play_sound_cbutton_side();
     }
+#endif
+
 
     lakitu_zoom(400.f, 0x900);
     c->nextYaw = update_8_directions_camera(c, c->focus, pos);
+    #ifdef REONUCAM
+    set_camera_height(c, pos[1]);
+    #endif
     c->pos[0] = pos[0];
     c->pos[2] = pos[2];
     sAreaYawChange = sAreaYaw - oldAreaYaw;
+    #ifndef REONUCAM
     set_camera_height(c, pos[1]);
+    #endif
 }
 
 /**
@@ -1720,7 +1827,7 @@ void mode_boss_fight_camera(struct Camera *c) {
 void mode_parallel_tracking_camera(struct Camera *c) {
     s16 dummy;
 
-    radial_camera_input(c, 0.f);
+    radial_camera_input(c);
     set_fov_function(CAM_FOV_DEFAULT);
     c->nextYaw = update_parallel_tracking_camera(c, c->focus, c->pos);
     camera_approach_s16_symmetric_bool(&dummy, 0, 0x0400);
@@ -3006,7 +3113,6 @@ void update_lakitu(struct Camera *c) {
  * Gets controller input, checks for cutscenes, handles mode changes, and moves the camera
  */
 void update_camera(struct Camera *c) {
-    UNUSED u8 unused[24];
 
     gCamera = c;
     update_camera_hud_status(c);
@@ -3014,11 +3120,18 @@ void update_camera(struct Camera *c) {
         // Only process R_TRIG if 'fixed' is not selected in the menu
         if (cam_select_alt_mode(0) == CAM_SELECTION_MARIO) {
             if (gPlayer1Controller->buttonPressed & R_TRIG) {
+#ifdef REONUCAM
+                if (set_cam_angle(0) == CAM_ANGLE_MARIO) {
+                    s8DirModeBaseYaw = snap_to_45_degrees(s8DirModeBaseYaw);
+                    set_cam_angle(CAM_ANGLE_LAKITU);
+                }              
+#else
                 if (set_cam_angle(0) == CAM_ANGLE_LAKITU) {
                     set_cam_angle(CAM_ANGLE_MARIO);
                 } else {
                     set_cam_angle(CAM_ANGLE_LAKITU);
                 }
+#endif
             }
         }
         play_sound_if_cam_switched_to_lakitu_or_mario();
@@ -4846,7 +4959,7 @@ void play_sound_if_cam_switched_to_lakitu_or_mario(void) {
 /**
  * Handles input for radial, outwards radial, parallel tracking, and 8 direction mode.
  */
-s32 radial_camera_input(struct Camera *c, UNUSED f32 unused) {
+s32 radial_camera_input(struct Camera *c) {
     s16 dummy;
 
     if ((gCameraMovementFlags & CAM_MOVE_ENTERED_ROTATE_SURFACE) || !(gCameraMovementFlags & CAM_MOVE_ROTATE)) {
@@ -4923,7 +5036,11 @@ s32 radial_camera_input(struct Camera *c, UNUSED f32 unused) {
     }
 
     // Zoom in / enter C-Up
+#ifdef REONUCAM
+    if ((gPlayer1Controller->buttonPressed & U_CBUTTONS) && !(gPlayer1Controller->buttonDown & R_TRIG)) {
+#else
     if (gPlayer1Controller->buttonPressed & U_CBUTTONS) {
+#endif
         if (gCameraMovementFlags & CAM_MOVE_ZOOMED_OUT) {
             gCameraMovementFlags &= ~CAM_MOVE_ZOOMED_OUT;
             play_sound_cbutton_up();
@@ -5510,7 +5627,11 @@ void set_camera_mode_8_directions(struct Camera *c) {
     if (c->mode != CAMERA_MODE_8_DIRECTIONS) {
         c->mode = CAMERA_MODE_8_DIRECTIONS;
         sStatusFlags &= ~CAM_FLAG_SMOOTH_MOVEMENT;
+#ifdef REONUCAM
+        s8DirModeBaseYaw = snap_to_45_degrees(s8DirModeBaseYaw);
+#else
         s8DirModeBaseYaw = 0;
+#endif
         s8DirModeYawOffset = 0;
     }
 }
diff --git a/src/game/camera.h b/src/game/camera.h
index f56ed02..b8d1405 100644
--- a/src/game/camera.h
+++ b/src/game/camera.h
@@ -292,6 +292,18 @@
 #define CAM_EVENT_START_END_WAVING    12
 #define CAM_EVENT_START_CREDITS       13
 
+#ifdef REONUCAM
+struct ReonucamState {
+    u8 speed;
+    u8 waterCamOverride;
+    u8 flyingCamOverride;
+    u8 keepCliffCam;
+    u16 rButtonCounter;
+    u16 rButtonCounter2;
+};
+extern struct ReonucamState gReonucamState;
+#endif
+
 /**
  * A copy of player information that is relevant to the camera.
  */
@@ -740,7 +752,7 @@ void play_sound_cbutton_side(void);
 void play_sound_button_change_blocked(void);
 void play_sound_rbutton_changed(void);
 void play_sound_if_cam_switched_to_lakitu_or_mario(void);
-s32 radial_camera_input(struct Camera *c, UNUSED f32 unused);
+s32 radial_camera_input(struct Camera *c);
 s32 trigger_cutscene_dialog(s32 trigger);
 void handle_c_button_movement(struct Camera *c);
 void start_cutscene(struct Camera *c, u8 cutscene);
diff --git a/src/game/game_init.c b/src/game/game_init.c
index abd9c13..6475c31 100644
--- a/src/game/game_init.c
+++ b/src/game/game_init.c
@@ -20,6 +20,10 @@
 #include "segment_symbols.h"
 #include "rumble_init.h"
 #include <prevent_bss_reordering.h>
+#ifdef REONUCAM
+#include "camera.h"
+#endif
+
 
 // FIXME: I'm not sure all of these variables belong in this file, but I don't
 // know of a good way to split them
@@ -574,7 +578,9 @@ void thread5_game_loop() {
     //play_music(SEQ_PLAYER_SFX, SEQUENCE_ARGS(0, SEQ_SOUND_PLAYER), 0);
     set_sound_mode(save_file_get_sound_mode());
     rendering_init();
-
+#ifdef REONUCAM
+    gReonucamState.speed = save_file_get_camera_speed();
+#endif
     while (TRUE) {
         profiler_log_thread5_time(THREAD5_START);
 
diff --git a/src/game/ingame_menu.c b/src/game/ingame_menu.c
index 5a62d42..26d97ef 100644
--- a/src/game/ingame_menu.c
+++ b/src/game/ingame_menu.c
@@ -35,6 +35,14 @@ s16 gCutsceneMsgXOffset;
 s16 gCutsceneMsgYOffset;
 s8 gRedCoinsCollected;
 
+#ifdef REONUCAM
+u8 textCamInfoSlowest[] = { TEXT_CAM_INFO_SLOWEST };
+u8 textCamInfoSlow[] = { TEXT_CAM_INFO_SLOW };
+u8 textCamInfoMedium[] = { TEXT_CAM_INFO_MEDIUM };
+u8 textCamInfoFast[] = { TEXT_CAM_INFO_FAST};
+u8 textCamInfoFastest[] = { TEXT_CAM_INFO_FASTEST };
+#endif
+
 extern u8 gLastCompletedCourseNum;
 extern u8 gLastCompletedStarNum;
 
@@ -2100,6 +2108,47 @@ void reset_red_coins_collected(void) {
     gRedCoinsCollected = 0;
 }
 
+#ifdef REONUCAM
+void render_reonucam_speed_setting(void) {
+    gSPDisplayList(gDisplayListHead++, dl_ia_text_begin);
+    gDPSetEnvColor(gDisplayListHead++, 255, 255, 255, gDialogTextAlpha);
+    switch (gReonucamState.speed) {
+        case 0:
+            print_generic_string(190, 20, textCamInfoSlowest);
+            break;
+        case 1:
+            print_generic_string(190, 20, textCamInfoSlow);
+            break;
+        case 2:
+            print_generic_string(190, 20, textCamInfoMedium);
+            break;
+        case 3:
+            print_generic_string(190, 20, textCamInfoFast);
+            break;
+        case 4:
+            print_generic_string(190, 20, textCamInfoFastest);
+            break;
+    }
+    gSPDisplayList(gDisplayListHead++, dl_ia_text_end);
+
+    if (gPlayer1Controller->buttonPressed & R_JPAD) {
+        if (gReonucamState.speed < 4) {
+            gReonucamState.speed += 1;
+        } else {
+            gReonucamState.speed = 0;
+        }
+        save_file_set_camera_speed(gReonucamState.speed);
+    } else if (gPlayer1Controller->buttonPressed & L_JPAD) {
+        if (gReonucamState.speed > 0) {
+            gReonucamState.speed -= 1;
+        } else {
+            gReonucamState.speed = 4;
+        }
+        save_file_set_camera_speed(gReonucamState.speed);
+    }
+}
+#endif
+
 void change_dialog_camera_angle(void) {
     if (cam_select_alt_mode(0) == CAM_SELECTION_MARIO) {
         gDialogCameraAngleIndex = CAM_SELECTION_MARIO;
@@ -2658,7 +2707,9 @@ s16 render_pause_courses_and_castle(void) {
             }
             break;
     }
-
+#ifdef REONUCAM
+        render_reonucam_speed_setting();
+#endif
     if (gDialogTextAlpha < 250) {
         gDialogTextAlpha += 25;
     }
diff --git a/src/game/mario.c b/src/game/mario.c
index 24fc6aa..6be1642 100644
--- a/src/game/mario.c
+++ b/src/game/mario.c
@@ -1434,7 +1434,22 @@ void set_submerged_cam_preset_and_spawn_bubbles(struct MarioState *m) {
     f32 heightBelowWater;
     s16 camPreset;
 
+#ifdef REONUCAM
+    // skip if not submerged
+    if ((m->action & ACT_GROUP_MASK) != ACT_GROUP_SUBMERGED) return;
+
+    // R Trigger toggles camera mode override
+    if ((gPlayer1Controller->buttonPressed & R_TRIG) && (m->action & ACT_FLAG_SWIMMING)) {
+        gReonucamState.waterCamOverride ^= 1;
+    }
+
+    // If override, set mode to 8 dir. Otherwise, use normal water processing
+    if (gReonucamState.waterCamOverride) {
+        if (m->area->camera->mode != CAMERA_MODE_8_DIRECTIONS) set_camera_mode(m->area->camera, CAMERA_MODE_8_DIRECTIONS, 1);
+    } else {
+#else
     if ((m->action & ACT_GROUP_MASK) == ACT_GROUP_SUBMERGED) {
+#endif
         heightBelowWater = (f32)(m->waterLevel - 80) - m->pos[1];
         camPreset = m->area->camera->mode;
 
diff --git a/src/game/mario_actions_airborne.c b/src/game/mario_actions_airborne.c
index 662c113..c7cebd0 100644
--- a/src/game/mario_actions_airborne.c
+++ b/src/game/mario_actions_airborne.c
@@ -1738,6 +1738,13 @@ s32 act_shot_from_cannon(struct MarioState *m) {
 s32 act_flying(struct MarioState *m) {
     s16 startPitch = m->faceAngle[0];
 
+#ifdef REONUCAM
+    if (gPlayer1Controller->buttonPressed & R_TRIG) {
+        gReonucamState.flyingCamOverride ^= 1;
+    }
+#endif
+
+
     if (m->input & INPUT_Z_PRESSED) {
         if (m->area->camera->mode == CAMERA_MODE_BEHIND_MARIO) {
             set_camera_mode(m->area->camera, m->area->camera->defMode, 1);
@@ -1751,10 +1758,18 @@ s32 act_flying(struct MarioState *m) {
         }
         return set_mario_action(m, ACT_FREEFALL, 0);
     }
-
+#ifdef REONUCAM
+    if (!gReonucamState.flyingCamOverride && m->area->camera->mode != CAMERA_MODE_BEHIND_MARIO) {
+        set_camera_mode(m->area->camera, CAMERA_MODE_BEHIND_MARIO, 1);
+    } else if (gReonucamState.flyingCamOverride && m->area->camera->mode != CAMERA_MODE_8_DIRECTIONS) {
+        set_camera_mode(m->area->camera, CAMERA_MODE_8_DIRECTIONS, 1);
+    }
+#else
     if (m->area->camera->mode != CAMERA_MODE_BEHIND_MARIO) {
         set_camera_mode(m->area->camera, CAMERA_MODE_BEHIND_MARIO, 1);
     }
+#endif
+
 
     if (m->actionState == 0) {
         if (m->actionArg == 0) {
diff --git a/src/game/save_file.c b/src/game/save_file.c
index 9cc97a5..c82a2fb 100644
--- a/src/game/save_file.c
+++ b/src/game/save_file.c
@@ -565,6 +565,19 @@ u16 save_file_get_sound_mode(void) {
     return gSaveBuffer.menuData[0].soundMode;
 }
 
+#ifdef REONUCAM
+void save_file_set_camera_speed(u8 speed) {
+    gSaveBuffer.menuData->cameraSpeedSetting = speed;
+    gMainMenuDataModified = TRUE;
+    save_main_menu_data();
+}
+
+u8 save_file_get_camera_speed(void) {
+    return gSaveBuffer.menuData->cameraSpeedSetting;
+}
+
+#endif
+
 void save_file_move_cap_to_default_location(void) {
     if (save_file_get_flags() & SAVE_FLAG_CAP_ON_GROUND) {
         switch (gSaveBuffer.files[gCurrSaveFileNum - 1][0].capLevel) {
diff --git a/src/game/save_file.h b/src/game/save_file.h
index ae6fcf3..957799d 100644
--- a/src/game/save_file.h
+++ b/src/game/save_file.h
@@ -51,7 +51,10 @@ struct MainMenuSaveData
     // the older the high score is. This is used for tie-breaking when displaying
     // on the high score screen.
     u32 coinScoreAges[NUM_SAVE_FILES];
-    u16 soundMode;
+    u16 soundMode: 2;
+#ifdef REONUCAM
+    u8 cameraSpeedSetting: 3;
+#endif
 
 #ifdef VERSION_EU
     u16 language;
